# -*- coding: utf-8 -*-
"""Mongo Db Assessment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_EJ6xrN7_KvbaqAeSHlHnTOUKb1Yp9LB

###### Assessment

###### I am going to provide two .csv files , you are supposed to work on them and have to provide solutions to the following problems

###### import necessary libraries
"""

!pip install dnspython
!pip install pymongo[srv]
!pip install pillow

pip install pandas

"""###### merge those two csv files (after getting as dataframes, get them as a single dataframe)"""

import pandas as pd
import numpy as np

df=pd.concat(map(pd.read_csv, ['https://raw.githubusercontent.com/Wishva23/MangoDb_Assesment/main/college_1.csv', 'https://raw.githubusercontent.com/Wishva23/MangoDb_Assesment/main/college_2.csv']), ignore_index=True)
df

dtf=pd.DataFrame(df,columns=["Name","CodeKata Score"])
dtf

"""###### Take each csv file , split that csv file into multiple categories (example csv files are added in the repo)

###### consider if the codekata score exceeds 15000 points(present week) then make a csv on those observations as Exceeded expectations.csv

###### if  10000<codekata score<15000   (Reached_expectations.csv)

###### if  7000<codekata score<10000   (Needs_Improvement.csv)

###### if  codekate score < 7000        (Unsatisfactory.csv)
"""

exceed=dtf[dtf["CodeKata Score"]> 15000]
exceed
exceed.to_csv('exceed.csv')

Reached_expectations=dtf[(dtf['CodeKata Score']> 10000) & (dtf['CodeKata Score']<15000)]
Reached_expectations.to_csv('Reached_expectations.csv')
Reached_expectations

Needs_Improvement=dtf[(dtf['CodeKata Score']> 7000) & (dtf['CodeKata Score']<10000)]
Needs_Improvement.to_csv('Needs_Improvement.csv')
Needs_Improvement

Unsatisfactory=dtf[dtf["CodeKata Score"]< 7000]
Unsatisfactory.to_csv('Unsatisfactory.csv')
Unsatisfactory

"""###### Average of previous week geekions vs this week geekions (i.e Previous Geekions vs CodeKata Score)"""

cols=['Previous Geekions','CodeKata Score']
cols_mean=df[cols].mean()
print(cols_mean)

"""###### No of students participated """

no_of_students=df['Name'].count()
no_of_students

"""###### #Average completion of python course or my_sql or python english or computational thinking"""

cols = ['python', 'mysql','python_en','computational_thinking']
df[cols].mean()

"""###### rising star of the week (top 3 candidate who performed well in that particular week)"""



"""###### Shining stars of the week (top 3 candidates who has highest geekions)"""

geekions_top_3=df.nlargest(3,['Previous Geekions'])
geekions_top_3

"""###### Department wise codekata performence (pie chart)"""

my_explode=(0,0,0.1)
df.groupby(['Department']).mean().plot(kind='pie',figsize=(8,8),fontsize=10, y='CodeKata Score',explode=my_explode, autopct='%1.0f%%', title='Codekata Perfomance',legend=False)

"""###### Department wise toppers (horizantal bar graph or any visual representations of your choice)"""

df2=df.groupby('Department')['Name','python', 'mysql','Previous Geekions','CodeKata Score','python_en','computational_thinking'].max()
df2

import plotly.express as px
import pandas as pd
fig=px.bar(df.groupby('Department')['python', 'mysql','Previous Geekions','CodeKata Score','python_en','computational_thinking'].max())
fig.show()

df2.plot.bar()

